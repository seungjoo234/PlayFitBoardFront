{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nconst usePagination = countPerPage => {\n  _s();\n  // state: 전체 객체 리스트 상태 //\n  const [totalList, setTotalList] = useState([]);\n  // state: 보여줄 객체 리스트 상태 //\n  const [viewList, setViewList] = useState([]);\n  // state: 현재 페이지 번호 상태 //\n  const [currentPage, setCurrentPage] = useState(1);\n  // state: 전체 페이지 번호 리스트 상태 //\n  const [totalPageList, setTotalPageList] = useState([1]);\n  // state: 보여줄 페이지 번호 리스트 상태 //\n  const [viewPageList, setViewPageList] = useState([1]);\n  // state: 현재 섹션 상태 //\n  const [currentSection, setCurrentSection] = useState(1);\n  // state: 전체 섹션 상태 //\n  const [totalSection, setTotalSection] = useState(1);\n\n  // function: 보여줄 객체 리스트 추출 함수 //\n  const setView = () => {\n    const FIRST_INDEX = countPerPage * (currentPage - 1);\n    const LAST_INDEX = totalList.length > countPerPage * currentPage ? countPerPage * currentPage : totalList.length;\n    const viewList = totalList.slice(FIRST_INDEX, LAST_INDEX);\n    setViewList(viewList);\n  };\n\n  // function: 보여줄 페이지 리스트 추출 함수 //\n  const setViewPage = () => {\n    const FIRST_INDEX = 10 * (currentSection - 1);\n    const LAST_INDEX = totalPageList.length > 10 * currentSection ? 10 * currentSection : totalPageList.length;\n    const viewPageList = totalPageList.slice(FIRST_INDEX, LAST_INDEX);\n    setViewPageList(viewPageList);\n  };\n\n  // effect: total list가 변경될 때마다 실행할 작업 //\n  useEffect(() => {\n    const totalPage = Math.ceil(totalList.length / countPerPage);\n    const totalPageList = [];\n    for (let page = 1; page <= totalPage; page++) totalPageList.push(page);\n    setTotalPageList(totalPageList);\n    const totalSection = Math.ceil(totalList.length / (countPerPage * 10));\n    setTotalSection(totalSection);\n    setCurrentPage(1);\n    setCurrentSection(1);\n    setView();\n    setViewPage();\n  }, [totalList]);\n\n  // effect: current page가 변경될 때마다 실행할 작업 //\n  useEffect(setView, [currentPage]);\n  // effect: current section이 변경될 때마다 실행할 작업 //\n  useEffect(setViewPage, [currentPage]);\n  return {\n    currentPage,\n    setCurrentPage,\n    currentSection,\n    setCurrentSection,\n    viewList,\n    viewPageList,\n    totalSection,\n    setTotalList\n  };\n};\n_s(usePagination, \"vRhjQKn/Xgvgz/0iOD7/zzGFpZY=\");\nexport default usePagination;","map":{"version":3,"names":["useEffect","useState","usePagination","countPerPage","_s","totalList","setTotalList","viewList","setViewList","currentPage","setCurrentPage","totalPageList","setTotalPageList","viewPageList","setViewPageList","currentSection","setCurrentSection","totalSection","setTotalSection","setView","FIRST_INDEX","LAST_INDEX","length","slice","setViewPage","totalPage","Math","ceil","page","push"],"sources":["C:/Users/임 승주/Downloads/Play-fit/PlayFitBoardFront/src/hooks/pagination.hook.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst usePagination = <T>(countPerPage: number) => {\r\n  // state: 전체 객체 리스트 상태 //\r\n  const [totalList, setTotalList] = useState<T[]>([]);\r\n  // state: 보여줄 객체 리스트 상태 //\r\n  const [viewList, setViewList] = useState<T[]>([]);\r\n  // state: 현재 페이지 번호 상태 //\r\n  const [currentPage, setCurrentPage] = useState<number>(1);\r\n  // state: 전체 페이지 번호 리스트 상태 //\r\n  const [totalPageList, setTotalPageList] = useState<number[]>([1]);\r\n  // state: 보여줄 페이지 번호 리스트 상태 //\r\n  const [viewPageList, setViewPageList] = useState<number[]>([1]);\r\n  // state: 현재 섹션 상태 //\r\n  const [currentSection, setCurrentSection] = useState<number>(1);\r\n  // state: 전체 섹션 상태 //\r\n  const [totalSection, setTotalSection] = useState<number>(1);\r\n\r\n  // function: 보여줄 객체 리스트 추출 함수 //\r\n  const setView = () => {\r\n    const FIRST_INDEX = countPerPage * (currentPage - 1);\r\n    const LAST_INDEX =\r\n      totalList.length > countPerPage * currentPage\r\n        ? countPerPage * currentPage\r\n        : totalList.length;\r\n    const viewList = totalList.slice(FIRST_INDEX, LAST_INDEX);\r\n    setViewList(viewList);\r\n  };\r\n\r\n  // function: 보여줄 페이지 리스트 추출 함수 //\r\n  const setViewPage = () => {\r\n    const FIRST_INDEX = 10 * (currentSection - 1);\r\n    const LAST_INDEX =\r\n      totalPageList.length > 10 * currentSection\r\n        ? 10 * currentSection\r\n        : totalPageList.length;\r\n    const viewPageList = totalPageList.slice(FIRST_INDEX, LAST_INDEX);\r\n    setViewPageList(viewPageList);\r\n  };\r\n\r\n  // effect: total list가 변경될 때마다 실행할 작업 //\r\n  useEffect(() => {\r\n    const totalPage = Math.ceil(totalList.length / countPerPage);\r\n    const totalPageList: number[] = [];\r\n    for (let page = 1; page <= totalPage; page++) totalPageList.push(page);\r\n    setTotalPageList(totalPageList);\r\n\r\n    const totalSection = Math.ceil(totalList.length / (countPerPage * 10));\r\n    setTotalSection(totalSection);\r\n\r\n    setCurrentPage(1);\r\n    setCurrentSection(1);\r\n\r\n    setView();\r\n    setViewPage();\r\n  }, [totalList]);\r\n\r\n  // effect: current page가 변경될 때마다 실행할 작업 //\r\n  useEffect(setView, [currentPage]);\r\n  // effect: current section이 변경될 때마다 실행할 작업 //\r\n  useEffect(setViewPage, [currentPage]);\r\n\r\n  return {\r\n    currentPage,\r\n    setCurrentPage,\r\n    currentSection,\r\n    setCurrentSection,\r\n    viewList,\r\n    viewPageList,\r\n    totalSection,\r\n    setTotalList,\r\n  };\r\n};\r\n\r\nexport default usePagination;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}